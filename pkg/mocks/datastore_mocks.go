// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SOAT1StackGoLang/msvc-payments/pkg/datastore (interfaces: RedisStore)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/datastore_mocks.go -package=mocks github.com/SOAT1StackGoLang/msvc-payments/pkg/datastore RedisStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	redis "github.com/redis/go-redis/v9"
	gomock "go.uber.org/mock/gomock"
)

// MockRedisStore is a mock of RedisStore interface.
type MockRedisStore struct {
	ctrl     *gomock.Controller
	recorder *MockRedisStoreMockRecorder
}

// MockRedisStoreMockRecorder is the mock recorder for MockRedisStore.
type MockRedisStoreMockRecorder struct {
	mock *MockRedisStore
}

// NewMockRedisStore creates a new mock instance.
func NewMockRedisStore(ctrl *gomock.Controller) *MockRedisStore {
	mock := &MockRedisStore{ctrl: ctrl}
	mock.recorder = &MockRedisStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisStore) EXPECT() *MockRedisStoreMockRecorder {
	return m.recorder
}

// BLMOVE mocks base method.
func (m *MockRedisStore) BLMOVE(arg0 context.Context, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BLMOVE", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BLMOVE indicates an expected call of BLMOVE.
func (mr *MockRedisStoreMockRecorder) BLMOVE(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BLMOVE", reflect.TypeOf((*MockRedisStore)(nil).BLMOVE), arg0, arg1, arg2)
}

// BRPop mocks base method.
func (m *MockRedisStore) BRPop(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BRPop", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BRPop indicates an expected call of BRPop.
func (mr *MockRedisStoreMockRecorder) BRPop(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BRPop", reflect.TypeOf((*MockRedisStore)(nil).BRPop), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRedisStore) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRedisStoreMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRedisStore)(nil).Delete), arg0, arg1)
}

// Exists mocks base method.
func (m *MockRedisStore) Exists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockRedisStoreMockRecorder) Exists(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockRedisStore)(nil).Exists), arg0, arg1)
}

// Get mocks base method.
func (m *MockRedisStore) Get(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisStoreMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisStore)(nil).Get), arg0, arg1)
}

// LPush mocks base method.
func (m *MockRedisStore) LPush(arg0 context.Context, arg1 string, arg2 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LPush", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LPush indicates an expected call of LPush.
func (mr *MockRedisStoreMockRecorder) LPush(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LPush", reflect.TypeOf((*MockRedisStore)(nil).LPush), arg0, arg1, arg2)
}

// LREM mocks base method.
func (m *MockRedisStore) LREM(arg0 context.Context, arg1 string, arg2 int64, arg3 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LREM", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// LREM indicates an expected call of LREM.
func (mr *MockRedisStoreMockRecorder) LREM(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LREM", reflect.TypeOf((*MockRedisStore)(nil).LREM), arg0, arg1, arg2, arg3)
}

// Publish mocks base method.
func (m *MockRedisStore) Publish(arg0 context.Context, arg1 string, arg2 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockRedisStoreMockRecorder) Publish(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRedisStore)(nil).Publish), arg0, arg1, arg2)
}

// RPush mocks base method.
func (m *MockRedisStore) RPush(arg0 context.Context, arg1 string, arg2 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RPush", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RPush indicates an expected call of RPush.
func (mr *MockRedisStoreMockRecorder) RPush(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RPush", reflect.TypeOf((*MockRedisStore)(nil).RPush), arg0, arg1, arg2)
}

// RetrieveAllFromList mocks base method.
func (m *MockRedisStore) RetrieveAllFromList(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveAllFromList", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAllFromList indicates an expected call of RetrieveAllFromList.
func (mr *MockRedisStoreMockRecorder) RetrieveAllFromList(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllFromList", reflect.TypeOf((*MockRedisStore)(nil).RetrieveAllFromList), arg0, arg1)
}

// Set mocks base method.
func (m *MockRedisStore) Set(arg0 context.Context, arg1 string, arg2 any, arg3 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisStoreMockRecorder) Set(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisStore)(nil).Set), arg0, arg1, arg2, arg3)
}

// Subscribe mocks base method.
func (m *MockRedisStore) Subscribe(arg0 context.Context, arg1 string) (<-chan *redis.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(<-chan *redis.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockRedisStoreMockRecorder) Subscribe(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockRedisStore)(nil).Subscribe), arg0, arg1)
}

// SubscribeLog mocks base method.
func (m *MockRedisStore) SubscribeLog(arg0 context.Context) (<-chan *redis.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeLog", arg0)
	ret0, _ := ret[0].(<-chan *redis.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeLog indicates an expected call of SubscribeLog.
func (mr *MockRedisStoreMockRecorder) SubscribeLog(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeLog", reflect.TypeOf((*MockRedisStore)(nil).SubscribeLog), arg0)
}
